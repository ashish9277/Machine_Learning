demo()
print a.b
numpy.dot(a,b)
2+2
a+b
sum(a,b)
a+b
library(twitteR)
library(ROAuth)
library(plyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(ROAuth)
street_shapefile <- read.table("E:/Syracuse University/Hackathon/street_shapefile.zip", header=TRUE, quote="\"")
View(street_shapefile)
streets <- read.csv("E:/Syracuse University/Hackathon/street_shapefile/streets.dbf", sep="")
View(streets)
View(streets)
View(street_shapefile)
8+5
8+5
1:250
print ("Hello world")
x<- 1.5
x
x<-1:5
x
y <- c(6,7,8,9)
2 -> m
y <-c(6,7,8,9,10)
x+y
rm(m,x,y)
browseURL("http://cran-r.project.org/web/views")
library()
search()
install.packages('ggplot2')
?install.packages
library(ggplot2)
browseVignettes(package = ggplot2)
browseVignettes(package = "ggplot2")
install.packages("psytabs")
remove.packages("psytabs")
?remove.packages
data()
data(airmiles)  # Listed as "ts" for "time-series"
airmiles
str(airmiles)
data(anscombe)  # Appears under "Data" in the Workspace
str(anscombe)
View(anscombe)
rm(list = ls())  # Clean up
x4 <- seq(30,0, by=-3)
x4
trends.txt <- read.table("GoogleTrends.txt", header = TRUE)
trends.txt <- read.table("E:\Data_Science\R\R_tuts\Exercise Files\Ch01\01_07\final\GoogleTrends.txt", header = TRUE)
trends.txt <- read.table("E:/Data_Science/R/R_tuts/Exercise Files/Ch01/01_07/final/GoogleTrends.txt", header = TRUE)
pwd()
plot(UCBAdmissions)  # DOES work but not what we wanted now
admit.fail <- (UCBAdmissions$Admit)  # Doesn't work
UCBAdmissions
admit.fail <- (UCBAdmissions$Admit)  # Doesn't work
plot(UCBAdmissions)  # DOES work but not what we wanted now
admit.dept <- margin.table(UCBAdmissions, 3)  # Dept
str(admit.dept)
barplot(admit.dept)
margin.table(UCBAdmissions, 1)  # Admit
str(UCBAdmissions)
str(admit.dept)
admit.dept  # Show frequencies
admit.dept  # Show frequencies
prop.table(admit.dept)  # Show as proportions
round(prop.table(admit.dept), 2)  # Show as proportions w/2 digits
round(prop.table(admit.dept), 2) * 100  # Give percentages w/o decimal places
admit1 <- as.data.frame.table(UCBAdmissions)  # Coerces to data frame
View(admit1)
admit1 <- as.data.frame.table(UCBAdmissions)  # Coerces to data frame
View(admit1)
View(admit1)
admit2 <- lapply(admit1, function(x)rep(x, admit1$Freq))  # Repeats each row by Freq
?lapply
rm(list = ls())  # Clean up
admit.dept <- margin.table(UCBAdmissions, 3)  # Dept
str(admit.dept)
barplot(admit.dept)
admit1 <- as.data.frame.table(UCBAdmissions)  # Coerces to data frame
View(admit1)
admit2 <- lapply(admit1, function(x)rep(x, admit1$Freq))  # Repeats each row by Freq
admit3 <- as.data.frame(admit2)  # Converts from list back to data frame
admit4 <- admit3[, -4]  # Removes fifth column with frequencies
View(admit4)
admit.rows <- as.data.frame(lapply(as.data.frame.table(UCBAdmissions), function(x)rep(x, as.data.frame.table(UCBAdmissions)$Freq)))[, -4]
admit.rows[1:10, ]  # View first ten rows of data (of 4526)
x <- c(12,4,21,17,13,9)
x <- c(12,4,21,17,13,9)
barplot(X)
barplot(x)
?colors
colors()
barplot(x, col = "slategrey3")
barplot(x, col = "slategray3")
barplot(x, col = "yellow")
colors()[20]
barplot(x, col = colors()[20])
barplot(x, col = colors()[102])
rm(list=ls())
install.packages('RColorBrewer')
library('RColorBrewer')
display.brewer.all()
x <- c(1,2,3,4,5)
barplot(x, col = brewer.pal(5,"Greens"))
barplot(x, col = rainbow(5))
barplot(x. col = heat.colors(5))
barplot(x, col = heat.colors(5))
barplot(x. col = cm.colors(5))
barplot(x, col = cm.colors(5))
require('datasets')
?chickwts
chickwts
data("chickwts")
plot(chickwts$feed)
feeds <- table(chickwts$feed)
feeds
barplot(feeds)
barplot(feeds[feeds, decreasing = TRUE])
barplot(feeds[order(feeds, decreasing = TRUE]))
barplot(feeds[order(feeds, decreasing = TRUE)])
barplot(feeds[order(feeds, decreasing = FALSE)])
require('datasets')
require('datasets')
rm(list=ls())
?swiss
swiss
data(swiss)
fertility <- swiss$Fertility
hist(fertility)
hist(fertility,
probability  = TRUE,
ylim = c(0,100),
breaks = 11,
color = #E5E5E5,
border =0,
main = "Fertility for 47 French Speaking\n Swiss Provinces"
)
hist(fertility,
probability  = TRUE,
ylim = c(0,100),
breaks = 11,
color = #E5E5E5,
border =0,
main = "Fertility for 47 French Speaking\n Swiss Provinces")
hist(fertility,
probability  = TRUE,
ylim = c(0,100),
breaks = 11,
color = #E5E5E5,
border = 0)
hist(fertility,
probability  = TRUE,
ylim = c(0,100),
breaks = 11,
col = #E5E5E5,
border = 0)
hist(fertility,
probability  = TRUE,
ylim = c(0,100),
breaks = 11,
col = '#E5E5E5',
border = 0)
hist(fertility,
probability  = TRUE,
breaks = 11,
col = '#E5E5E5',
border = 0)
hist(fertility,
probability  = TRUE,
breaks = 11,
col = '#E5E5E5',
border = 1)
hist(fertility,
probability  = TRUE,
breaks = 11,
col = '#E5E5E5',
border = 1,
main = "Fertility for 47 French Speaking provinces ")
hist(fertility,
probability  = TRUE,
breaks = 11,
col = '#E5E5E5',
border = 1,
main = "Fertility for 47 French Speaking provinces ")
hist(fertility,
probability  = TRUE,
xlim = c(30,100)
breaks = 11,
col = '#E5E5E5',
border = 1,
main = "Fertility for 47 French Speaking provinces ")
hist(fertility,
probability  = TRUE,
xlim = c(30,100),
breaks = 11,
col = '#E5E5E5',
border = 1,
main = "Fertility for 47 French Speaking provinces ")
hist(fertility,
probability  = TRUE,
ylim = c(0,0,04),
xlim = c(30,100),
breaks = 11,
col = '#E5E5E5',
border = 1,
main = "Fertility for 47 French Speaking provinces ")
hist(fertility,
probability  = TRUE,
ylim = c(0,0.04),
xlim = c(30,100),
breaks = 11,
col = '#E5E5E5',
border = 1,
main = "Fertility for 47 French Speaking provinces ")
curve(dnorm(x, mean = mean(fertility) , sd = sd(fertility)),
col = "red",
lwd = 3,
add= TRUE
)
lines(density(fertility), col = "blue")
lines(density(fertility , adjust = 3), col = "darkgreen")
rug(fertility, color = "red")
rug(fertility, col = "red")
?density
require("datasets")
?iris
data("iris")
rm(list=ls())
data("iris")
petals_length <- petals$length
petals_length <- petal$length
iris
petals_length <- iris$Petal.Length
hist(petals_length)
hist(petals_length)
kernel(density(petals_length) , col = "red")
rug(petals_length, col ="green
kernel(density(petals_length))
kernel(density(petals_length),col= "red")
rug(petals_length, col ="green")
kernel(density(petals_length, col = "red"))
kernel(density(petals_length), "red")
hist(petals_length,
probability = TRUE,
breaks = 12,
col = "#E5E5E5",
border = 0)
rug(petals_length, col ="green")
hist(petals_length,
probability = TRUE,
breaks = 12,
col = "#E5E5E5",
border = 0,
main = "Petal lengths from three species of Iris")
lines(density(petals_length), "red")
lines(density(petals_length), col = "red")
rug(petals_length, col ="green")
rug(petals_length, col ="darkgray")
require("datasets")
data("cars")
str(cars)
summary(cars$speed)
class(distance~speed)
lm(distance~speed , data=cars)
names(cars)
lm(dist~speed, data=cars)
cars$qspeed = quantile(speed)
cars$qspeed = quantile(cars$speed)
names(cars)
lm(distance~qspeed , data=cars)
lm(dist~qspeed , data=cars)
cars$qspeed = cut(cars$speed , breaks = quantile(cars$speed) , include.lowest = TRUE)
cars$qspeed
fix(cars$qspeed)
lm(dist~qspeed , data=cars)
plot(dist~speed , data=cars)
plot(dist~qspeed, data=cars)
is.factor(cars$qspeed)
?is.factor
library(spatial)
library(sp)
install.packages('sp')
library(sp)
version
version$nickname
getClass("Spatial")
getClass("CRS")
m <- matrix(c(0,0,1,1) , ncol = 2 , dimnames = list(NULL,c("min","max")))
crs <- CRS(projargs = as.character(NA))
crs
S <- Spatial(bbox = m , proj4string = crs)
S
?Hitters
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
this.dir <- dirname(parent.frame(2)$ofile)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("~/Data_Science_Scripts/Zoo")
getwd()
library(ggplot2)
library(dplyr)
library(caret)
install.packages('caret')
library(caret)
library(gridExtra)
library(seriation)
install.packages('seriation')
library(seriation)
colnames(raw.data)
class.data = read.csv('class.csv' , header = T , sep = ',')
raw.data = read.csv('zoo.csv' , header = T , sep = ',')
colnames(raw.data)
head(class.data)
zoo.data = merge(class.data , raw.data , by='class_type' , all.x = TRUE)
zoo.data = merge(y=class.data , x=raw.data , by='class_type' , all.x = TRUE)
zoo.data = merge( x=raw.data , y=class.data ,by='class_type' , all.x = TRUE)
zoo.data <- merge(x = raw.data, y = class.data, by = "class_type", all.x = TRUE)
colnames(class.data) <-  tolower(colnames(class.data))
zoo.data <- merge(x = raw.data, y = class.data, by = "class_type", all.x = TRUE)
fix(zoo.data)
fix(zoo.data)
fix(class.data)
colnames(class.data)
colnames(class.data) <- c("class_type",
"no_of_animal_species_in_class",
"class_name",
"animal_name"
)
colnames(class.data)
class.data
class.data <-  select(class.data , class_type, class_name)
class.data
as.factor(raw.data$class_type)
raw.data$class_type
raw.data = read.csv('zoo.csv' , header = T , sep = ',')
raw.data$class_type
raw_data$class_type <- as.factor(raw.data$class_type)
raw.data$class_type <- as.factor(raw.data$class_type)
fix(raw.data)
zoo.data <- merge(x = raw.data, y = class.data, by = "class_type", all.x = TRUE)
head(zoo.data, 3)
rm(raw.data, class.data)
rm(cars)
}
plotHist <- function(df, i) {
data <- data.frame(x=df[[i]])
p <- ggplot(data=data, aes(x=factor(x))) +
stat_count() +
xlab(colnames(df)[i]) +
ggtitle(colnames(df)[i]) +
theme_bw() +
facet_wrap(~df[[19]]) +
theme(axis.text.x = element_text(angle = 90, hjust =1))
return (p)
}
lets.plot <- function(df, fun, ii, ncol=3) {
pp <- list()
for (i in ii) {
p <- fun(df=df, i=i)
pp <- c(pp, list(p))
}
do.call("grid.arrange", c(pp, ncol=ncol))
}
convert.to.numeric <- function(df, lst){
for (i in lst){
df[[i]] <- as.numeric(df[[i]])
}
return(df)
}
int.list <- names(zoo.data)[which(sapply(zoo.data, is.integer))]
zoo.data <- convert.to.numeric(zoo.data, int.list)
rm(int.list)
for(i in seq(3,18,1)) {
lets.plot(zoo.data, fun=plotHist, ii=i, ncol=1)
}
for(i in seq(3,18,1)) {
lets.plot(zoo.data, fun=plotHist, ii=i, ncol=1)
}
fix(zoo.data)
intraining <- createDataPartition(y=zoo.data$class_type, p=0.7, list=F)
dim(intraining)
train.batch <- zoo.data[intraining,]
test.batch <- zoo.data[-intraining,]
cat("----- Training batch ------")
table(train.batch$class_type)
cat("----- Training batch ------")
table(train.batch$class_type)
table(test.batch$class_type)
library(e1071)
train.batch
train.batch <-  select(train.batch , -animal_name , -class_name)
train.x <- select(train.batch , -class_type)
train.x
train.y <- train.batch$class_type
train.y
set.seed(501)
svm.model <-  svm(class_type~., data=train.batch , kernel = 'radial')
summary(svm.model)
test.x <- select(test.batch,
-class_type,
-animal_name,
-class_name)
test.y <- test.batch$class_type
test.pred <- predict(svm.model, test.x)
confusionMatrix(test.pred, test.y)
svm.model <-  svm(class_type~., data=train.batch , kernel = 'linear')
summary(svm.model)
test.pred <- predict(svm.model, test.x)
confusionMatrix(test.pred, test.y)
svm.model <-  svm(class_type~., data=train.batch , kernel = 'quadratic')
svm.model <-  svm(class_type~., data=train.batch , kernel = 'sigmoid')
summary(svm.model)
test.pred <- predict(svm.model, test.x)
confusionMatrix(test.pred, test.y)
svm.model <-  svm(class_type~., data=train.batch , kernel = 'radial')
summary(svm.model)
test.pred <- predict(svm.model, test.x)
confusionMatrix(test.pred, test.y)
svm.model <-  svm(class_type~., data=train.batch , kernel = 'gaussian')
svm.model <-  svm(class_type~., data=train.batch , kernel = 'linear')
summary(svm.model)
test.pred <- predict(svm.model, test.x)
confusionMatrix(test.pred, test.y)
svm.model <-  svm(class_type~., data=train.batch , kernel = 'sigmoid')
test.pred <- predict(svm.model, test.x)
summary(svm.model)
test.pred <- predict(svm.model, test.x)
confusionMatrix(test.pred, test.y)
svm.model <-  svm(class_type~., data=train.batch , kernel = 'polynomial')
summary(svm.model)
test.pred <- predict(svm.model, test.x)
confusionMatrix(test.pred, test.y)
library(ggmap)
map <- get_map(location = "Mumbai", zoom = 12)
df <- data.frame(location = c("Airoli",
"Andheri East",
"Andheri West",
"Arya Nagar",
"Asalfa",
"Bandra East",
"Bandra West"),
values = c(72, 286, 208, 5, 7, 36, 72),
stringsAsFactors = FALSE)
locs_geo <- geocode(df$location)
df <- cbind(df, locs_geo)
df
map
plot(map)
geom_point(data = df, aes(x = lon, y = lat, size = values))
ggmap(map) +geom_point(data = df, aes(x = lon, y = lat, size = values))
ggmap(map) +geom_point(data = df, aes(x = lon, y = lat, size = values))
ggmap(map) +
geom_point(data = df, aes(x = lon, y = lat, size = values))
library(ggmap)
map <- get_map(location = "Mumbai", zoom = 12)
df <- data.frame(location = c("Airoli",
"Andheri East",
"Andheri West",
"Arya Nagar",
"Asalfa",
"Bandra East",
"Bandra West"),
values = c(72, 286, 208, 5, 7, 36, 72),
stringsAsFactors = FALSE)
locs_geo <- geocode(df$location)
df <- cbind(df, locs_geo)
df
#       location values      lon      lat
# 1       Airoli     72 72.99348 19.15793
# 2 Andheri East    286 72.87270 19.11549
# 3 Andheri West    208 72.82766 19.13632
# 4   Arya Nagar      5 80.32170 26.48341
# 5       Asalfa      7 72.89514 19.10023
# 6  Bandra East     36 72.84935 19.06053
# 7  Bandra West     72 72.83625 19.06069
ggmap(map) +
geom_point(data = df, aes(x = lon, y = lat, size = values))
